name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build release binaries
      env:
        VERSION: ${{ github.ref_name }}
        COMMIT: ${{ github.sha }}
        DATE: ${{ github.event.head_commit.timestamp }}
      run: |
        ./scripts/build.sh
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get the tag message or generate from commits
        TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
        
        if [ -z "$TAG_MESSAGE" ]; then
          # Generate from commits since last tag
          LAST_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" ${LAST_TAG}..HEAD)
            RELEASE_NOTES="## Changes\n\n${COMMITS}"
          else
            RELEASE_NOTES="## Release ${{ github.ref_name }}\n\nInitial release of kportforward Go version."
          fi
        else
          RELEASE_NOTES="$TAG_MESSAGE"
        fi
        
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          
          ## Installation
          
          Download the appropriate binary for your platform:
          
          - **macOS (Intel)**: `kportforward-darwin-amd64`
          - **macOS (Apple Silicon)**: `kportforward-darwin-arm64`
          - **Linux**: `kportforward-linux-amd64`
          - **Windows**: `kportforward-windows-amd64.exe`
          
          Make the binary executable and place it in your PATH:
          
          ```bash
          chmod +x kportforward-*
          sudo mv kportforward-* /usr/local/bin/kportforward
          ```
          
          ## Features
          
          - üöÄ Modern terminal UI with real-time updates
          - üîÑ Automatic port-forward recovery and monitoring
          - üåê Cross-platform support (macOS, Linux, Windows)
          - üìä Interactive sorting and service details
          - üîß Embedded configuration with user overrides
          - üÜô Built-in auto-update system
          - üéØ gRPC UI and Swagger UI integration
          
          ## Checksums
          
          Verify your download with the checksums below.
        files: |
          dist/*
        draft: false
        prerelease: false
    
    - name: Update latest tag
      run: |
        git tag -f latest
        git push origin latest --force
        
    - name: Update Homebrew formula
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get version without 'v' prefix for formula
        FORMULA_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
        
        # Create a temporary branch for the formula update
        git fetch origin
        git checkout -b homebrew-update-${{ github.ref_name }}
        
        # Update formula with version and checksums
        ./scripts/update-homebrew.sh ${{ github.ref_name }}
        
        # Commit and push changes
        git add HomebrewFormula/kportforward.rb
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions"
        git commit -m "Update Homebrew formula for ${{ github.ref_name }}"
        git push origin homebrew-update-${{ github.ref_name }}
        
        # Create pull request to update formula
        echo "Creating pull request for homebrew formula update..."
        
        # Try with gh cli first
        if gh pr create --title "Update Homebrew formula for ${{ github.ref_name }}" \
                     --body "Updates the Homebrew formula to version $FORMULA_VERSION with new checksums." \
                     --base main \
                     --head homebrew-update-${{ github.ref_name }}; then
          echo "Pull request created successfully!"
        else
          echo "Could not create PR automatically. A branch has been pushed with the formula updates."
          echo "Please manually create a PR from the 'homebrew-update-${{ github.ref_name }}' branch."
          
          # Output PR creation URL for logs
          echo "Manual PR creation URL: https://github.com/catio-tech/kportforward/pull/new/homebrew-update-${{ github.ref_name }}"
        fi